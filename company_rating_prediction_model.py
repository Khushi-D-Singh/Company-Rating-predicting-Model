# -*- coding: utf-8 -*-
"""company-rating-prediction-model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/Khushi-D-Singh/986b1599dbccd8afb5f5962f65eb7374/company-rating-prediction-model.ipynb
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
file_path = "/content/companies_data.csv"
df = pd.read_csv(file_path)

# Remove unnecessary columns
df = df.drop(columns=["Unnamed: 0", "reviews"])

# Convert employee size to numbers
def convert_employee_size(emp):
    if pd.isna(emp):
        return None
    if "10000+" in emp:
        return 10000
    elif "-" in emp:
        low, high = emp.split("-")
        return (int(low.replace(",", "")) + int(high.replace(",", ""))) // 2
    return int(emp.replace(",", ""))

df["employee"] = df["employee"].apply(convert_employee_size)

# Remove missing values
df = df.dropna()

# Convert text data into numbers (One-Hot Encoding)
df_encoded = pd.get_dummies(df, columns=["type", "hq"], drop_first=True)

# Define features (X) and target (y)
X = df_encoded.drop(columns=["name", "rating"])
y = df_encoded["rating"]

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train an SVM regression model
model = SVR(kernel='rbf', C=10, gamma='scale', epsilon=0.1)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate model performance
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Show results
print(f"Mean Squared Error: {mse}")
print(f"R-squared Score: {r2}")

print("Actual Ratings:", list(y_test[:90000]))   # Print first 10 actual ratings
print("Predicted Ratings:", list(y_pred[:90000]))  # Print first 10 predicted ratings

# Plot actual vs. predicted ratings
plt.figure(figsize=(8, 5))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.5, color="blue")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color="red", linestyle="--")
plt.xlabel("Actual Ratings")
plt.ylabel("Predicted Ratings")
plt.title("Actual vs. Predicted Company Ratings (SVM)")
plt.show()

# Histogram of Ratings
plt.figure(figsize=(8, 5))
sns.histplot(df["rating"], bins=30, kde=True, color="green")
plt.title("Distribution of Company Ratings")
plt.xlabel("Rating")
plt.ylabel("Frequency")
plt.show()

# Boxplot of Ratings by Company Type
plt.figure(figsize=(8, 5))
sns.boxplot(x=df["type"], y=df["rating"])
plt.xticks(rotation=45)
plt.xlabel("Company Type")
plt.ylabel("Rating")
plt.title("Company Ratings by Type")
plt.show()